package de.buadrabas.dnd_companion.ui.main.characterGallery

import android.content.Intent
import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.databinding.DataBindingUtil
import androidx.fragment.app.Fragment
import androidx.lifecycle.Observer
import androidx.lifecycle.ViewModelProvider
import androidx.navigation.fragment.findNavController
import androidx.recyclerview.widget.LinearLayoutManager
import de.buadrabas.dnd_companion.R
import de.buadrabas.dnd_companion.data.character.CharacterDatabase
import de.buadrabas.dnd_companion.databinding.FragmentCharaGalleryBinding
import de.buadrabas.dnd_companion.ui.newCharacter.CreateNewCharacterActivity

class CharacterGalleryFragment : Fragment() {
	
	/**
	 * Called when the Fragment is ready to display content to the screen.
	 *
	 * This function uses DataBindingUtil to inflate R.layout.fragment_chara_gallery.
	 *
	 * It is also responsible for passing the [CharacterGalleryViewModel] to the
	 * [FragmentCharacterBinding] generated by DataBinding. This will allow DataBinding
	 * to use the [LiveData] on our ViewModel.
	 */
	
	override fun onCreateView(
		inflater: LayoutInflater,
		container: ViewGroup?,
		savedInstanceState: Bundle?
	): View? {
		val binding: FragmentCharaGalleryBinding =
			DataBindingUtil.inflate(inflater, R.layout.fragment_chara_gallery, container, false)
		val application = requireNotNull(this.activity).application
		
		val dataSource = CharacterDatabase.getInstance(application).characterClassDao
		val viewModelFactory = CharacterGalleryViewModelFactory(dataSource, application)
		val characterViewModel = ViewModelProvider(this, viewModelFactory).get(
			CharacterGalleryViewModel::class.java
		)
		
		val adapter = CharacterGalleryAdapter(NewCharacterListener { characterId ->
			characterViewModel.onCharacterClicked(characterId)
		})
		val manager = LinearLayoutManager(activity)
		
		binding.characterGalleryViewModel = characterViewModel
		
		binding.characterList.adapter = adapter
		
		characterViewModel.allCharacters.observe(viewLifecycleOwner, Observer {
			it?.let {
				adapter.submitList(it)
			}
		})
		
		// Specify the current activity as the lifecycle owner of the binding.
		// This is necessary so that the binding can observe LiveData updates.
		binding.lifecycleOwner = this
		
		manager.isSmoothScrollbarEnabled = true
		
		characterViewModel.navigateToCharacterDetails.observe(
			viewLifecycleOwner,
			Observer { character ->
				character?.let {
					this.findNavController().navigate(
						CharacterGalleryFragmentDirections.actionNavCharaGalleryToNavCharacterSheet(
							character
						)
					)
					characterViewModel.onCharacterDetailNavigated()
				}
			})
		
		characterViewModel.navigateToNewCharacter.observe(
			viewLifecycleOwner,
			Observer { character ->
				character?.let {
					val intent = Intent(
						activity, CreateNewCharacterActivity::class.java
					)
					startActivity(intent)
					characterViewModel.onCharacterDetailNavigated()
				}
			})
		
		binding.characterList.layoutManager = manager
		
		return binding.root
	}
}